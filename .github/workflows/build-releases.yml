name: Build Cross-Platform Releases

on:
  push:
    tags:
      - 'v*.*.*'  # 当推送版本标签时触发
  workflow_dispatch:  # 允许手动触发
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.4)'
        required: true
        default: '1.0.4'

# 添加权限设置
permissions:
  contents: write  # 允许创建Release和上传文件
  actions: read    # 允许读取Actions状态

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Windows executable (OneDir)
      run: |
        python -m PyInstaller GeneticImprove_win.spec --clean --noconfirm
    
    - name: Install Inno Setup
      run: |
        choco install innosetup -y
    
    - name: Create Inno Setup script
      run: |
        # 获取版本号
        $VERSION = python -c "from version import get_version; print(get_version())"
        echo "Building version: $VERSION"
        
        # 创建Inno Setup脚本
        @"
        #define MyAppName "奶牛育种智选报告专家"
        #define MyAppVersion "$VERSION"
        #define MyAppPublisher "Genetic Improve Team"
        #define MyAppURL "https://github.com/Barton0411/genetic_improve"
        #define MyAppExeName "GeneticImprove.exe"
        
        [Setup]
        AppId={{7133EFA4-A392-4138-BA22-2BEB199B5056}
        AppName={#MyAppName}
        AppVersion={#MyAppVersion}
        AppPublisher={#MyAppPublisher}
        AppPublisherURL={#MyAppURL}
        AppSupportURL={#MyAppURL}
        AppUpdatesURL={#MyAppURL}
        DefaultDirName={autopf}\{#MyAppName}
        UninstallDisplayIcon={app}\{#MyAppExeName}
        ArchitecturesAllowed=x64compatible
        ArchitecturesInstallIn64BitMode=x64compatible
        DisableProgramGroupPage=yes
        OutputBaseFilename=GeneticImprove_v{#MyAppVersion}_win
        ; SetupIconFile=_internal\icon.ico
        SolidCompression=yes
        WizardStyle=modern
        OutputDir=installer_output
        Compression=lzma2
        CompressionThreads=auto
        
        [Languages]
        Name: "english"; MessagesFile: "compiler:Default.isl"
        
        [Tasks]
        Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
        
        [Files]
        Source: "dist\GeneticImprove\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
        
        [Icons]
        Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; WorkingDir: "{app}"
        Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; WorkingDir: "{app}"; Tasks: desktopicon
        
        [Run]
        Filename: "{app}\{#MyAppExeName}"; WorkingDir: "{app}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
        "@ | Out-File -FilePath setup.iss -Encoding UTF8
        
        echo "Inno Setup script created"
    
    - name: Build installer with Inno Setup
      run: |
        # 创建输出目录
        New-Item -ItemType Directory -Force -Path installer_output
        
        # 编译安装包
        & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" setup.iss
        
        # 显示生成的文件
        Get-ChildItem installer_output
    
    - name: Create portable ZIP package
      run: |
        # 获取版本号
        $VERSION = python -c "from version import get_version; print(get_version())"
        
        # 创建便携版ZIP
        $ZIP_NAME = "GeneticImprove_v$VERSION" + "_win.zip"
        Compress-Archive -Path "dist\GeneticImprove\*" -DestinationPath $ZIP_NAME -Force
        
        echo "Portable package created: $ZIP_NAME"
        
        # 显示文件大小
        $size = (Get-Item $ZIP_NAME).Length / 1MB
        echo "Package size: $([math]::Round($size, 2)) MB"
    
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: installer_output/*.exe
        retention-days: 30
    
    - name: Upload Windows portable
      uses: actions/upload-artifact@v4
      with:
        name: windows-portable
        path: GeneticImprove_v*_win.zip
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        # 安装创建DMG的工具
        brew install create-dmg
    
    - name: Convert ICO to ICNS and build macOS application
      run: |
        # 检查是否有icon.ico文件
        if [ -f "icon.ico" ]; then
          echo "Found icon.ico, converting to ICNS..."
          
          # 创建临时目录用于图标转换
          mkdir -p icon_temp.iconset
          
          # 使用sips转换ICO到PNG，然后创建ICNS
          sips -z 16 16 "icon.ico" --out "icon_temp.iconset/icon_16x16.png" || echo "Failed to create 16x16 icon"
          sips -z 32 32 "icon.ico" --out "icon_temp.iconset/icon_16x16@2x.png" || echo "Failed to create 16x16@2x icon"
          sips -z 32 32 "icon.ico" --out "icon_temp.iconset/icon_32x32.png" || echo "Failed to create 32x32 icon"
          sips -z 64 64 "icon.ico" --out "icon_temp.iconset/icon_32x32@2x.png" || echo "Failed to create 32x32@2x icon"
          sips -z 128 128 "icon.ico" --out "icon_temp.iconset/icon_128x128.png" || echo "Failed to create 128x128 icon"
          sips -z 256 256 "icon.ico" --out "icon_temp.iconset/icon_128x128@2x.png" || echo "Failed to create 128x128@2x icon"
          sips -z 256 256 "icon.ico" --out "icon_temp.iconset/icon_256x256.png" || echo "Failed to create 256x256 icon"
          sips -z 512 512 "icon.ico" --out "icon_temp.iconset/icon_256x256@2x.png" || echo "Failed to create 256x256@2x icon"
          sips -z 512 512 "icon.ico" --out "icon_temp.iconset/icon_512x512.png" || echo "Failed to create 512x512 icon"
          sips -z 1024 1024 "icon.ico" --out "icon_temp.iconset/icon_512x512@2x.png" || echo "Failed to create 512x512@2x icon"
          
          # 创建ICNS文件
          if iconutil -c icns icon_temp.iconset -o "icon.icns"; then
            echo "Successfully created icon.icns"
          else
            echo "Failed to create ICNS file, will proceed without icon"
            rm -f "icon.icns"
          fi
          
          # 清理临时文件
          rm -rf icon_temp.iconset
        else
          echo "No icon.ico file found"
        fi
        
        # 检查是否成功创建了ICNS文件
        if [ -f "icon.icns" ]; then
          echo "icon.icns exists, size: $(ls -lh icon.icns)"
        else
          echo "No icon.icns file available for build"
        fi
        
        python -m PyInstaller GeneticImprove.spec --clean --noconfirm
    
    - name: Fix app permissions, icon and security
      run: |
        # 设置应用名称为伊利选配
        /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName 伊利选配" "dist/伊利选配.app/Contents/Info.plist" || true
        /usr/libexec/PlistBuddy -c "Set :CFBundleName 伊利选配" "dist/伊利选配.app/Contents/Info.plist" || true
        
        # 如果有ICNS文件，确保正确设置
        if [ -f "icon.icns" ]; then
          cp "icon.icns" "dist/伊利选配.app/Contents/Resources/" || true
          /usr/libexec/PlistBuddy -c "Set :CFBundleIconFile icon.icns" "dist/伊利选配.app/Contents/Info.plist" || true
        fi
        
        # 修复权限
        chmod -R 755 "dist/伊利选配.app"
        find "dist/伊利选配.app" -name "*.dylib" -exec chmod 755 {} \;
        find "dist/伊利选配.app" -name "*.so" -exec chmod 755 {} \;
        
        # 清除扩展属性（避免"已损坏"警告）
        xattr -cr "dist/伊利选配.app"
        
        # 创建安装说明文件
        cat > "安装说明.txt" << 'EOF'
        伊利选配 安装说明
        
        如果遇到"Apple无法验证此应用"的提示：
        
        方法1（推荐）：
        1. 右键点击应用程序
        2. 选择"打开"
        3. 在弹出对话框中点击"打开"
        
        方法2：
        1. 打开"系统偏好设置" > "安全性与隐私"
        2. 在"通用"选项卡中点击"仍要打开"
        
        这是因为应用未经过Apple官方签名，但软件本身是安全的。
        EOF
    
    - name: Create beautiful DMG with background
      run: |
        # 获取版本号
        VERSION=$(python -c "from version import get_version; print(get_version())")
        echo "Building version: $VERSION"
        
        APP_NAME="伊利选配"
        DMG_NAME="YiLiBreeding_v${VERSION}_mac"
        DMG_PATH="${DMG_NAME}.dmg"
        
        # 创建DMG背景图片目录（如果需要）
        mkdir -p dmg_resources
        
        # 创建一个简单的背景图片说明文件
        cat > dmg_resources/README.txt << EOF
        伊利选配 v$VERSION
        
        安装说明：
        1. 将 伊利选配 拖拽到 Applications 文件夹
        2. 从启动台或应用程序文件夹启动应用
        3. 首次运行可能需要右键点击选择"打开"
        EOF
        
        # 使用create-dmg创建美观的DMG
        create-dmg \
          --volname "伊利选配" \
          --window-pos 200 120 \
          --window-size 600 300 \
          --icon-size 100 \
          --icon "${APP_NAME}.app" 150 150 \
          --hide-extension "${APP_NAME}.app" \
          --app-drop-link 450 150 \
          --text-size 14 \
          --format UDZO \
          --hdiutil-quiet \
          --no-internet-enable \
          "$DMG_PATH" \
          "dist/" || {
            # 如果create-dmg失败，使用简单方法
            echo "create-dmg failed, using simple method"
            
            DMG_DIR="dmg_temp"
            rm -rf "$DMG_DIR"
            mkdir -p "$DMG_DIR"
            
            cp -R "dist/伊利选配.app" "$DMG_DIR/"
            ln -s /Applications "$DMG_DIR/Applications"
            
            hdiutil create -volname "伊利选配" \
                -srcfolder "$DMG_DIR" \
                -ov -format UDZO \
                "$DMG_PATH"
            
            rm -rf "$DMG_DIR"
        }
        
        echo "macOS DMG created: $DMG_PATH"
        
        # 显示文件大小
        size=$(du -sh "$DMG_PATH" | cut -f1)
        echo "DMG size: $size"
    
    - name: Sign DMG (optional)
      run: |
        # 如果有开发者证书，可以签名
        # codesign --force --deep --sign "Developer ID Application: Your Name" *.dmg
        echo "Skipping code signing (no certificate configured)"
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-release
        path: YiLiBreeding_v*_mac.dmg
        retention-days: 30

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: 伊利选配 v${{ steps.get_version.outputs.VERSION }}
        body: |
          ## 伊利选配 v${{ steps.get_version.outputs.VERSION }}
          
          ### 🚀 新功能和改进
          - 优化个体选配报告生成性能，添加约束数据缓存机制
          - 实现选配备注系统，详细说明约束过滤情况
          - 新增近交系数和隐性基因约束分析功能
          - 修复备注格式，去除冗余前缀文字
          - 大幅提升报告生成速度，减少文件I/O操作
          - 修复Mac应用图标显示和Windows构建完整性问题
          
          ### 📦 下载选项
          
          #### Windows版本
          - **安装版**: `GeneticImprove_v${{ steps.get_version.outputs.VERSION }}_win.exe` - 推荐，包含自动安装程序
          - **便携版**: `GeneticImprove_v${{ steps.get_version.outputs.VERSION }}_win.zip` - 解压即用，无需安装
          
          #### macOS版本
          - **DMG安装包**: `YiLiBreeding_v${{ steps.get_version.outputs.VERSION }}_mac.dmg`
          
          ### 📋 系统要求
          - **Windows**: Windows 10 或更高版本（64位）
          - **macOS**: macOS 10.15 (Catalina) 或更高版本
          - 至少 2GB 可用内存
          - 至少 1GB 可用磁盘空间
          
          ### 🔧 安装说明
          
          **Windows安装版**:
          1. 下载 `_setup.exe` 文件
          2. 双击运行安装程序
          3. 按照向导完成安装
          4. 桌面快捷方式自动创建
          
          **Windows便携版**:
          1. 下载并解压 ZIP 文件
          2. 运行文件夹中的 `GeneticImprove.exe`
          
          **macOS**:
          1. 下载并打开 DMG 文件
          2. 将 伊利选配.app 拖拽到应用程序文件夹
          3. 从启动台或应用程序文件夹启动
        files: |
          ./windows-installer/GeneticImprove_v${{ steps.get_version.outputs.VERSION }}_win.exe
          ./windows-portable/GeneticImprove_v${{ steps.get_version.outputs.VERSION }}_win.zip
          ./macos-release/YiLiBreeding_v${{ steps.get_version.outputs.VERSION }}_mac.dmg
        draft: false
        prerelease: false